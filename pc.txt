`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 14.07.2025 11:32:40
// Design Name: 
// Module Name: pc
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module pc(
input logic clk,
input logic reset,
input logic load_en,
input logic inc_en,
input logic [7:0]  pc_in,
output logic [7:0]  pc_out

    );
    
    logic [7:0] pc_reg;
    always_ff @(posedge clk)begin
    if(reset)
    pc_reg <= 8'b0;
    else if(load_en)
    pc_reg <= pc_in;
    else if(inc_en)
    pc_reg <= pc_reg +1 ;
    end
    assign pc_out = pc_reg ;
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 14.07.2025 12:08:28
// Design Name: 
// Module Name: pc_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

//`include "pc.sv"

module pc_tb;
logic clk;
logic reset;
logic load_en;
logic inc_en;
logic [7:0] pc_in;
logic [7:0] pc_out;
//instantiate the DUT
pc dut(
.clk (clk),
.reset (reset),
.load_en (load_en),
.inc_en (inc_en),
.pc_in (pc_in),
.pc_out (pc_out)

);
always #5 clk=~clk;
initial begin
$display ("starting pc testbench");
$monitor ("[%0t] reset= %b ,load_en =%b ,inc_en =%b ,pc_in = %h,pc_out=%h",$time ,reset,load_en,inc_en,pc_in,pc_out);

 // Initialize signals
    clk     = 0;
    reset   = 0;
    load_en = 0;
    inc_en  = 0;
    pc_in   = 8'h00;
    
    // Apply reset
    #2  reset = 1;
    #10 reset = 0;

   // Increment PC 3 times
    #10 inc_en = 1;
    #30 inc_en = 0;

   // Load a jump address
    #10 pc_in = 8'h3C;
        load_en = 1;
    #10 load_en = 0;

   // Increment again
    #10 inc_en = 1;
    #20 inc_en = 0;

    // Hold PC
    #10;

   // Apply another reset
    #10 reset = 1;
    #10 reset = 0;

   
    #10;
    $finish;
  end


   
endmodule
